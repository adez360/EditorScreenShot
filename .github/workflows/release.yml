name: Build Release

on: 
  workflow_dispatch:

jobs:

  # Validate Repository Configuration
  config:
    runs-on: ubuntu-latest
    outputs:
      config_package: ${{ steps.config_package.outputs.configPackage }}
    steps:

    # Ensure that required repository variable has been created for the Package
    - name: Validate Package Config
      id: config_package
      run: |
        if [ "${{ vars.PACKAGE_NAME }}" != "" ]; then
          echo "configPackage=true" >> $GITHUB_OUTPUT;
        else
          echo "configPackage=false" >> $GITHUB_OUTPUT;
        fi

  # Build and release the Package
  # If the repository is not configured properly, this job will be skipped
  build:
    needs: config
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      packagePath: Packages/${{ vars.PACKAGE_NAME }}
    if: needs.config.outputs.config_package == 'true'
    steps:

      # Checkout Local Repository
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac

      # Get the Package version based on the package.json file
      - name: Get Version
        id: version
        uses: zoexx/github-action-json-file-properties@b9f36ce6ee6fe2680cd3c32b2c62e22eade7e590
        with: 
            file_path: "${{ env.packagePath }}/package.json"
            prop_path: "version"
    
      # Configure the Environment Variables needed for releasing the Package
      - name: Set Environment Variables
        run: |
          echo "zipFile=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}".zip >> $GITHUB_ENV
          echo "unityPackage=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
          echo "version=${{ steps.version.outputs.value }}" >> $GITHUB_ENV

      # Zip the Package for release
      - name: Create Package Zip
        working-directory: "${{ env.packagePath }}"
        run: zip -r "${{ github.workspace }}/${{ env.zipFile }}" .
      
      # Build a list of .meta files for future use
      - name: Track Package Meta Files
        run: find "${{ env.packagePath }}/" -name \*.meta >> metaList
      
      # Make a UnityPackage version of the Package for release
      - name: Create UnityPackage
        uses: pCYSl5EDgo/create-unitypackage@v1.2.3
        with:
          package-path: ${{ env.unityPackage }}
          include-files: metaList
      
      # Make a release tag of the version from the package.json file 
      - name: Create Tag
        id: tag_version
        uses: rickstaa/action-create-tag@88dbf7ff6fe2405f8e8f6c6fdfd78829bc631f83
        with:
          tag: "${{ env.version }}"
      
      # Extract release notes from CHANGELOG.md
      - name: Extract Release Notes
        id: release_notes
        run: |
          # Extract the section for current version from CHANGELOG.md
          VERSION="${{ env.version }}"
          CHANGELOG_FILE="${{ env.packagePath }}/CHANGELOG.md"
          
          # Find the section for this version
          START_LINE=$(grep -n "## \[$VERSION\]" "$CHANGELOG_FILE" | cut -d: -f1)
          if [ -n "$START_LINE" ]; then
            # Find the next version section or end of file
            NEXT_LINE=$(tail -n +$((START_LINE + 1)) "$CHANGELOG_FILE" | grep -n "## \[" | head -1 | cut -d: -f1)
            if [ -n "$NEXT_LINE" ]; then
              END_LINE=$((START_LINE + NEXT_LINE - 1))
            else
              END_LINE=$(wc -l < "$CHANGELOG_FILE")
            fi
            
            # Extract the content
            sed -n "${START_LINE},${END_LINE}p" "$CHANGELOG_FILE" > release_notes.md
          else
            echo "## Release $VERSION" > release_notes.md
            echo "No changelog entry found for version $VERSION" >> release_notes.md
          fi
          
          # Add installation instructions
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "Add this package to your Unity project via Package Manager:" >> release_notes.md
          echo '```' >> release_notes.md
          echo "https://github.com/adez360/EditorScreenShot.git?path=Packages/com.adez360.editorscreenshot" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "Or download the \`.unitypackage\` file and import it manually." >> release_notes.md

      # Publish the Release to GitHub
      - name: Make Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          files: |
            ${{ env.zipFile }}
            ${{ env.unityPackage }}
            ${{ env.packagePath }}/package.json
          tag_name: ${{ env.version }}
          name: "EditorScreenShot v${{ env.version }}"
          body_path: release_notes.md
